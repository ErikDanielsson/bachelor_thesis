---
title: "Drift scale param test"
format:
  html:
    code-fold: true
execute:
  freeze: auto
jupyter: phylogenetics
---

```{python}
# Add the python helper directory to the path

import sys
import os
from pathlib import Path

CWD = Path(os.getcwd())
sys.path.append(str(CWD / "../python_helpers/"))

# Import the python helpers
import proc_output

import arviz as az
import xarray as xr
import matplotlib.pyplot as plt
import warnings
import pandas as pd

# Suppress warning from arviz
# -- it complains that all samples are the same
warnings.filterwarnings(action="ignore", module=r"arviz")

pipeline_result_dir = CWD / "pipeline_outputs"
datadir = pipeline_result_dir / "datadir"

# Set output dirs
output_dir = pipeline_result_dir / "output"
param_comb_path = output_dir / "compile_id_to_param_comb.csv"
```

## Data generation n. 1
```{python}
genids = [1, 2]
interaction_files = [datadir / f"interactions.{i}.csv" for i in genids]

dfs_interaction_mat = [pd.read_csv(fn, index_col=0) for fn in interaction_files]
```
### Interaction matrix
```{python}
genid = 1
plt.imshow(dfs_interaction_mat[genid - 1].to_numpy(), cmap="Greys")
plt.title(f"Generation id: {genid}")
plt.show()
```
```{python}
# Read files
df, tppl_fns = proc_output.get_files_in_dir(
    output_dir,
    {
        "rb": proc_output.get_rb_output_pattern(),
        "tppl": proc_output.get_tppl_output_pattern(),
    },
)

df = proc_output.create_inference_data_df(
    df, {"rb": proc_output.read_rb_file, "tppl": proc_output.read_tppl_file}, 0, 1
)
```

### TreePPL run
```{python}
dfs = {name: sub_df for name, sub_df in df.groupby("file_type")}
tppl_df = dfs["tppl"]
tppl_df = proc_output.add_compile_params(tppl_df, param_comb_path)
tppl_multi_channel = proc_output.create_multi_chain_dataset_df(tppl_df, "genid")
az.plot_trace(tppl_multi_channel.loc[1, "multi_channel"], compact=False)
plt.show()
``` 
### RevBayes run
```{python}
rb_df = dfs["rb"]
rb_multi_channel = proc_output.create_multi_chain_dataset_df(rb_df, "genid")
az.plot_trace(rb_multi_channel.loc[1, "multi_channel"], compact=False)
plt.show()
```
## Data generation n. 2
### Interaction matrix
```{python}
genid = 2
plt.imshow(dfs_interaction_mat[genid - 1].to_numpy(), cmap="Greys")
plt.title(f"Generation id: {genid}")
plt.show()
```
### TreePPL run
```{python}
az.plot_trace(tppl_multi_channel.loc[2, "multi_channel"], compact=False)
plt.show()
``` 
### RevBayes run
```{python}
az.plot_trace(rb_multi_channel.loc[2, "multi_channel"], compact=False)
plt.show()
```

